import 'package:colla_chat/provider/myself.dart';
import 'package:colla_chat/widgets/data_bind/data_listtile.dart';
import 'package:elegant_notification/elegant_notification.dart';
import 'package:elegant_notification/resources/arrays.dart';
import 'package:flutter/material.dart';
import 'package:stacked_notification_cards/stacked_notification_cards.dart';

class NotificationUtil {
  static show(
    BuildContext context, {
    Key? key,
    Widget? title,
    required Widget description,
    required Widget icon,
    Color shadowColor = Colors.grey,
    Color background = Colors.white,
    double radius = 5.0,
    bool enableShadow = true,
    bool showProgressIndicator = true,
    Widget Function(void Function())? closeButton,
    Color? progressIndicatorColor,
    Duration toastDuration = const Duration(milliseconds: 3000),
    bool displayCloseButton = true,
    dynamic Function()? onCloseButtonPressed,
    dynamic Function()? onProgressFinished,
    Alignment position = Alignment.topRight,
    AnimationType animation = AnimationType.fromRight,
    Duration animationDuration = const Duration(milliseconds: 600),
    double iconSize = 20,
    Widget? action,
    dynamic Function()? onActionPressed,
    bool autoDismiss = true,
    double? height,
    double? width,
    double? progressBarHeight,
    double? progressBarWidth,
    EdgeInsetsGeometry? progressBarPadding,
    dynamic Function()? onDismiss,
    Color progressIndicatorBackground = Colors.grey,
  }) {
    ElegantNotification(
      key: key,
      title: title,
      description: description,
      icon: icon,
      background: background,
      showProgressIndicator: showProgressIndicator,
      closeButton: closeButton,
      progressIndicatorColor: progressIndicatorColor ?? myself.primary,
      toastDuration: toastDuration,
      displayCloseButton: displayCloseButton,
      onCloseButtonPressed: onCloseButtonPressed,
      onProgressFinished: onProgressFinished,
      position: position,
      animation: animation,
      animationDuration: animationDuration,
      iconSize: iconSize,
      action: action,
      autoDismiss: autoDismiss,
      height: height,
      width: width,
      progressBarHeight: progressBarHeight,
      progressBarWidth: progressBarWidth,
      progressBarPadding: progressBarPadding,
      onDismiss: onDismiss,
      progressIndicatorBackground: progressIndicatorBackground,
    ).show(context);
  }

  static info(
    BuildContext context, {
    Key? key,
    Widget? title,
    required Widget description,
    bool showProgressIndicator = true,
    Widget Function(void Function())? closeButton,
    Duration toastDuration = const Duration(milliseconds: 3000),
    bool displayCloseButton = true,
    dynamic Function()? onCloseButtonPressed,
    dynamic Function()? onProgressFinished,
    Alignment position = Alignment.topRight,
    AnimationType animation = AnimationType.fromRight,
    Duration animationDuration = const Duration(milliseconds: 600),
    double iconSize = 20,
    Widget? action,
    dynamic Function()? onActionPressed,
    bool autoDismiss = true,
    double? height,
    double? width,
    double? progressBarHeight,
    double? progressBarWidth,
    EdgeInsetsGeometry? progressBarPadding,
    dynamic Function()? onDismiss,
    Color progressIndicatorBackground = Colors.grey,
  }) {
    ElegantNotification.info(
      key: key,
      title: title,
      description: description,
      showProgressIndicator: showProgressIndicator,
      closeButton: closeButton,
      toastDuration: toastDuration,
      displayCloseButton: displayCloseButton,
      onCloseButtonPressed: onCloseButtonPressed,
      onProgressFinished: onProgressFinished,
      position: position,
      animation: animation,
      animationDuration: animationDuration,
      iconSize: iconSize,
      action: action,
      autoDismiss: autoDismiss,
      height: height,
      width: width,
      progressBarHeight: progressBarHeight,
      progressBarWidth: progressBarWidth,
      progressBarPadding: progressBarPadding,
      onDismiss: onDismiss,
      progressIndicatorBackground: progressIndicatorBackground,
    ).show(context);
  }

  static success(
    BuildContext context, {
    Key? key,
    Widget? title,
    required Widget description,
    bool showProgressIndicator = true,
    Widget Function(void Function())? closeButton,
    Duration toastDuration = const Duration(milliseconds: 3000),
    bool displayCloseButton = true,
    dynamic Function()? onCloseButtonPressed,
    dynamic Function()? onProgressFinished,
    Alignment position = Alignment.topRight,
    AnimationType animation = AnimationType.fromRight,
    Duration animationDuration = const Duration(milliseconds: 600),
    double iconSize = 20,
    Widget? action,
    dynamic Function()? onActionPressed,
    bool autoDismiss = true,
    double? height,
    double? width,
    double? progressBarHeight,
    double? progressBarWidth,
    EdgeInsetsGeometry? progressBarPadding,
    dynamic Function()? onDismiss,
    Color progressIndicatorBackground = Colors.grey,
  }) {
    ElegantNotification.success(
      key: key,
      title: title,
      description: description,
      showProgressIndicator: showProgressIndicator,
      closeButton: closeButton,
      toastDuration: toastDuration,
      displayCloseButton: displayCloseButton,
      onCloseButtonPressed: onCloseButtonPressed,
      onProgressFinished: onProgressFinished,
      position: position,
      animation: animation,
      animationDuration: animationDuration,
      iconSize: iconSize,
      action: action,
      autoDismiss: autoDismiss,
      height: height,
      width: width,
      progressBarHeight: progressBarHeight,
      progressBarWidth: progressBarWidth,
      progressBarPadding: progressBarPadding,
      onDismiss: onDismiss,
      progressIndicatorBackground: progressIndicatorBackground,
    ).show(context);
  }

  static error(
    BuildContext context, {
    Key? key,
    Widget? title,
    required Widget description,
    bool showProgressIndicator = true,
    Widget Function(void Function())? closeButton,
    Duration toastDuration = const Duration(milliseconds: 3000),
    bool displayCloseButton = true,
    dynamic Function()? onCloseButtonPressed,
    dynamic Function()? onProgressFinished,
    Alignment position = Alignment.topRight,
    AnimationType animation = AnimationType.fromRight,
    Duration animationDuration = const Duration(milliseconds: 600),
    double iconSize = 20,
    Widget? action,
    dynamic Function()? onActionPressed,
    bool autoDismiss = true,
    double? height,
    double? width,
    double? progressBarHeight,
    double? progressBarWidth,
    EdgeInsetsGeometry? progressBarPadding,
    dynamic Function()? onDismiss,
    Color progressIndicatorBackground = Colors.grey,
  }) {
    ElegantNotification.error(
      key: key,
      title: title,
      description: description,
      showProgressIndicator: showProgressIndicator,
      closeButton: closeButton,
      toastDuration: toastDuration,
      displayCloseButton: displayCloseButton,
      onCloseButtonPressed: onCloseButtonPressed,
      onProgressFinished: onProgressFinished,
      position: position,
      animation: animation,
      animationDuration: animationDuration,
      iconSize: iconSize,
      action: action,
      autoDismiss: autoDismiss,
      height: height,
      width: width,
      progressBarHeight: progressBarHeight,
      progressBarWidth: progressBarWidth,
      progressBarPadding: progressBarPadding,
      onDismiss: onDismiss,
      progressIndicatorBackground: progressIndicatorBackground,
    ).show(context);
  }

  NotificationCard buildNotificationCard(DateTime date, TileData tileData) {
    return NotificationCard(
        date: date,
        leading: tileData.prefix,
        title: tileData.title,
        subtitle: tileData.subtitle ?? '');
  }

  StackedNotificationCards buildStackedNotificationCards({
    Key? key,
    required List<NotificationCard> notificationCards,
    required Color cardColor,
    required String notificationCardTitle,
    required void Function() onTapClearAll,
    required Widget clearAllNotificationsAction,
    required Widget clearAllStacked,
    required Widget cardClearButton,
    required Widget cardViewButton,
    required void Function(int) onTapClearCallback,
    required void Function(int) onTapViewCallback,
    required Widget actionTitle,
    required Widget showLessAction,
    List<BoxShadow>? boxShadow,
    TextStyle titleTextStyle = const TextStyle(fontWeight: FontWeight.w500),
    TextStyle? subtitleTextStyle,
    double cardCornerRadius = 8,
    double cardsSpacing = 10,
    double padding = 0,
  }) {
    return StackedNotificationCards(
      key: key,
      notificationCards: notificationCards,
      cardColor: cardColor,
      notificationCardTitle: notificationCardTitle,
      onTapClearAll: onTapClearAll,
      clearAllNotificationsAction: clearAllNotificationsAction,
      clearAllStacked: clearAllStacked,
      cardClearButton: cardClearButton,
      cardViewButton: cardViewButton,
      onTapClearCallback: onTapClearCallback,
      onTapViewCallback: onTapViewCallback,
      actionTitle: actionTitle,
      showLessAction: showLessAction,
      boxShadow: boxShadow,
      titleTextStyle: titleTextStyle,
      subtitleTextStyle: subtitleTextStyle,
      cardCornerRadius: cardCornerRadius,
      cardsSpacing: cardsSpacing,
      padding: padding,
    );
  }
}
